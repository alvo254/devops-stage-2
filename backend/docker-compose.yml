version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - adminer
    networks:
      - app_network

  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://ubuntu:twende@1357@db/fast_api
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ubuntu
      POSTGRES_PASSWORD: twende@1357
      POSTGRES_DB: fast_api
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./setup.sh:/docker-entrypoint-initdb.d/setup.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ubuntu"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    external: true

# version: '3.8'

# services:
#   nginx:
#     image: nginx:latest
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro
#     depends_on:
#       - backend
#       - adminer

#   backend:
#     build: 
#       context: .
#       dockerfile: Dockerfile
#     environment:
#       - DATABASE_URL=postgresql://ubuntu:twende@1357@db/fast_api
#     expose:
#       - "8000"
#     depends_on:
#       db:
#         condition: service_healthy

#   db:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: ubuntu
#       POSTGRES_PASSWORD: twende@1357
#       POSTGRES_DB: fast_api
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./setup.sh:/docker-entrypoint-initdb.d/setup.sh
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ubuntu"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   adminer:
#     image: adminer
#     expose:
#       - "8080"
#     depends_on:
#       - db

# volumes:
#   postgres_data:

# networks:
#   default:
#     name: app_network
#     external: true